var Service, Characteristic;
var request = require("request");
var pollingtoevent = require('polling-to-event');

	module.exports = function(homebridge){
		Service = homebridge.hap.Service;
		Characteristic = homebridge.hap.Characteristic;
		homebridge.registerAccessory("homebridge-http", "Http", HttpAccessory);
	}


	function HttpAccessory(log, config) {
		this.log = log;


		//  %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//    %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//  %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		// JavaHAP properties:   %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		this.saveLocation = '/usr/local/lib/node_modules/homebridge-http/Extended/';
		this.amqp = require('amqplib/callback_api');
		this.config = config;
		//  END JavaHap properties %% | %% | %% | %%  %% | %% | %% | %% | %% |  
		//  %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//    %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//  %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 



		// url info
		this.on_url                 = config["on_url"];
		this.on_body                = config["on_body"];
		this.off_url                = config["off_url"];
		this.off_body               = config["off_body"];
		this.status_url             = config["status_url"];
		this.brightness_url         = config["brightness_url"];
		this.brightnesslvl_url      = config["brightnesslvl_url"];
		this.http_method            = config["http_method"] 	  	 	|| "GET";;
		this.http_brightness_method = config["http_brightness_method"]  || this.http_method;
		this.username               = config["username"] 	  	 	 	|| "";
		this.password               = config["password"] 	  	 	 	|| "";
		this.sendimmediately        = config["sendimmediately"] 	 	|| "";
		this.service                = config["service"] 	  	 	 	|| "Switch";
		this.name                   = config["name"];
		this.brightnessHandling     = config["brightnessHandling"] 	 	|| "no";
		this.switchHandling 		= config["switchHandling"] 		 	|| "no";
		
		//realtime polling info
		this.state = false;
		this.currentlevel = 0;
		this.enableSet = true;
		var that = this;
		
		// Status Polling, if you want to add additional services that don't use switch handling you can add something like this || (this.service=="Smoke" || this.service=="Motion"))
		if (this.status_url && this.switchHandling =="realtime") {
			var powerurl = this.status_url;
			var statusemitter = pollingtoevent(function(done) {
	        	that.httpRequest(powerurl, "", "GET", that.username, that.password, that.sendimmediately, function(error, response, body) {
            		if (error) {
                		that.log('HTTP get power function failed: %s', error.message);
		                callback(error);
            		} else {               				    
						done(null, body);
            		}
        		})
			}, {longpolling:true,interval:300,longpollEventName:"statuspoll"});

		statusemitter.on("statuspoll", function(data) {       
        	var binaryState = parseInt(data.replace(/\D/g,""));
	    	that.state = binaryState > 0;
			that.log(that.service, "received power",that.status_url, "state is currently", binaryState); 
			// switch used to easily add additonal services
			that.enableSet = false;
			switch (that.service) {
				case "Switch":
					if (that.switchService ) {
						that.switchService .getCharacteristic(Characteristic.On)
						.setValue(that.state);
					}
					break;
				case "Light":
					if (that.lightbulbService) {
						that.lightbulbService.getCharacteristic(Characteristic.On)
						.setValue(that.state);
					}		
					break;			
			}
			that.enableSet = true;   
		});

	}
	// Brightness Polling
	if (this.brightnesslvl_url && this.brightnessHandling =="realtime") {
		var brightnessurl = this.brightnesslvl_url;
		var levelemitter = pollingtoevent(function(done) {
	        	that.httpRequest(brightnessurl, "", "GET", that.username, that.password, that.sendimmediately, function(error, response, responseBody) {
            		if (error) {
                			that.log('HTTP get power function failed: %s', error.message);
							return;
            		} else {               				    
						done(null, responseBody);
            		}
        		}) // set longer polling as slider takes longer to set value
    	}, {longpolling:true,interval:300,longpollEventName:"levelpoll"});

		levelemitter.on("levelpoll", function(data) {  
			that.currentlevel = parseInt(data);

			that.enableSet = false;
			if (that.lightbulbService) {				
				that.log(that.service, "received brightness",that.brightnesslvl_url, "level is currently", that.currentlevel); 		        
				that.lightbulbService.getCharacteristic(Characteristic.Brightness)
				.setValue(that.currentlevel);
			}   
			that.enableSet = true;
    	});
	}
	}

	HttpAccessory.prototype = {




	// %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
	//   %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
	// %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
	// JavaHAP METHODS: %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
  	setupValues: function(callback) {
		switch (this.service){
			case "Thermostat":
				this.writeValue('targetHeatingCoolingState', 0);
				this.writeValue('targetTemperature', 23);
				this.writeValue('currentTemperature', 23);
				this.writeValue('temperatureDisplayUnits', 0);
				break;
			case "Switch":
				this.writeValue('powerState', 0);
				break;
			case "Light":
				this.writeValue('powerState', 0);
				this.writeValue('brightness', 100);
				break;
		}
  	},

  	executeCommand: function(command){
  		var exec = require('child_process').exec;
		exec(c, function(error, stdout, stderr){} );
  	},

  	rabbitSend: function(message){
		this.amqp.connect('amqp://localhost', function(err, conn) {
		  	conn.createChannel(function(err, ch) {
		  		var q = 'hap';
		  		var msg = message;

 		   		ch.assertQueue(q, {durable: false});
		    	// Note: on Node 6 Buffer.from(msg) should be used
		    	ch.sendToQueue(q, new Buffer(msg));
		    	console.log(" [x] Sent %s", msg);
		  	});
		  	setTimeout(function() { conn.close(); }, 200);
		});
	},
	

  	writeValue: function(valueName, value){

  		var sentence = ""+value;
		var fs = require('fs');
		fs.writeFile( this.saveLocation  + this.name + '_'+valueName+'.txt', sentence, function(err) {
    		if(err) {
        		return console.log(err);
    		}
		}); 

		return;

  	},

  	readValue: function(valueName, type, callback){
  		 fs = require('fs')
  		 var that = this;
  		fs.readFile( this.saveLocation  + this.name + '_'+valueName+'.txt', 'utf8', function (err,data) {
			if (err) {
				that.setupValues();
				callback(null, 0);
  			}
  			else {
  				console.log("Getting "+valueName+": %s", data);
  				switch (type){
  					case "int":
  					callback(null, parseInt(data));
  					break;
  					case "float":
  					callback(null, parseFloat(data));
  					case "string":
  					callback(null, data);
  					break;
  				}
  				
  			}
		});
  	},

  	update(method, value, callback){
  		var action = this.config[method+"_action"];
  		if (action == "rabbitmq") {
  			this.rabbitSend('update '+this.name+' '+method+' '+value);
  		}
		else {
			var command = action.replace('#NAME#', this.name);
  			command = command.replace('#VALUE#', value);
			this.executeCommand(c);
		}		
		this.writeValue(method, value);
		callback();
  	},


	fakeFunction: function(){

	},



	getRabbitqPowerState: function(callback) {
    	this.readValue('powerState', 'int', callback);
	},

	setRabitmqPowerState: function(powerOn, callback) {
		this.update("powerState", powerOn ? 1 : 0, callback);
	},



	getRabbitqBrightness: function(callback) {
		this.readValue('Brightness', 'int', callback);
	},

	setRabitmqBrightness: function(value, callback) { 
		this.update("brightness", value, callback);
	},



  	getRabbitqTargetHeatingCoolingState: function(callback) {
  		this.readValue('targetHeatingCoolingState', 'int', callback);
	},

	setRabitmqTargetHeatingCoolingState: function(value, callback) {
		this.update("targetHeatingCoolingState", value, callback);
	},



	getRabbitqCurrentTemperature: function(callback) {
		this.readValue('currentTemperature', 'int', callback);
	},


	setRabitmqCurrentTemperature: function(value, callback) {
		this.update("currentTemperature", value, callback);
  	},



	getRabbitqTargetTemperature: function(callback) {
		this.readValue('currentTemperature', 'int', callback);
	},

	setRabitmqTargetTemperature: function(value, callback) {
		this.update("targetTemperature", value, callback);
	},



	getRabbitqTemperatureDisplayUnits: function(callback) {
		this.readValue('temperatureDisplayUnits', 'int', callback);
	},

	setRabitmqTemperatureDisplayUnits: function(value, callback) {
		this.update("temperatureDisplayUnits", value, callback);
	},
	// END JAVAHAP METHODS | %% | %% | %% | %% | %% | %% | %% | %% | %% | %% |
	//  %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
	//    %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
	//  %% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 



	httpRequest: function(url, body, method, username, password, sendimmediately, callback) {
		request({
			url: url,
			body: body,
			method: method,
			rejectUnauthorized: false,
			auth: {
				user: username,
				pass: password,
				sendImmediately: sendimmediately
			}
		},
		function(error, response, body) {
			callback(error, response, body)
		})
	},

	setPowerState: function(powerOn, callback) {
				
	if (this.enableSet == true && (this.currentlevel == 0 || !powerOn )) {
		
		var url;
		var body;
		
		if (!this.on_url || !this.off_url) {
				this.log.warn("Ignoring request; No power url defined.");
				callback(new Error("No power url defined."));
				return;
		}
		
		if (powerOn) {
			url = this.on_url;
			body = this.on_body;
			this.log("Setting power state to on");
		} else {
			url = this.off_url;
			body = this.off_body;
			this.log("Setting power state to off");
		}
		
		this.httpRequest(url, body, this.http_method, this.username, this.password, this.sendimmediately, function(error, response, responseBody) {
			if (error) {
			this.log('HTTP set power function failed: %s', error.message);
			callback(error);
			} else {
			this.log('HTTP set power function succeeded!');
			callback();
			}
		}.bind(this));
	} else {
	 	callback();
	}
	},
  
  getPowerState: function(callback) {
	if (!this.status_url) {
		this.log.warn("Ignoring request; No status url defined.");
		callback(new Error("No status url defined."));
		return;
	}
	
	var url = this.status_url;
	this.log("Getting power state");
	
	this.httpRequest(url, "", "GET", this.username, this.password, this.sendimmediately, function(error, response, responseBody) {
	if (error) {
		this.log('HTTP get power function failed: %s', error.message);
		callback(error);
	} else {
		var binaryState = parseInt(responseBody.replace(/\D/g,""));
		var powerOn = binaryState > 0;
		this.log("Power state is currently %s", binaryState);
		callback(null, powerOn);
	}
	}.bind(this));
  },

	getBrightness: function(callback) {
		if (!this.brightnesslvl_url) {
			this.log.warn("Ignoring request; No brightness level url defined.");
			callback(new Error("No brightness level url defined."));
			return;
		}		
			var url = this.brightnesslvl_url;
			this.log("Getting Brightness level");
	
			this.httpRequest(url, "", "GET", this.username, this.password, this.sendimmediately, function(error, response, responseBody) {
			if (error) {
				this.log('HTTP get brightness function failed: %s', error.message);
				callback(error);
			} else {			
				var binaryState = parseInt(responseBody.replace(/\D/g,""));
				var level = binaryState;
				this.log("brightness state is currently %s", binaryState);
				callback(null, level);
			}
			}.bind(this));
	  },

	setBrightness: function(level, callback) {
	if (this.enableSet == true) {
		if (!this.brightness_url) {
			this.log.warn("Ignoring request; No brightness url defined.");
			callback(new Error("No brightness url defined."));
			return;
		}    
	
		var url = this.brightness_url.replace("%b", level)
	
		this.log("Setting brightness to %s", level);
	
		this.httpRequest(url, "", this.http_brightness_method, this.username, this.password, this.sendimmediately, function(error, response, body) {
		if (error) {
			this.log('HTTP brightness function failed: %s', error);
			callback(error);
		} else {
			this.log('HTTP brightness function succeeded!');
			callback();
		}
		}.bind(this));
	} else {
		callback();
	}
	},

	identify: function(callback) {
		this.log("Identify requested!");
		callback(); // success
	},

	getServices: function() {
		
		var that = this;
		
		// you can OPTIONALLY create an information service if you wish to override
		// the default values for things like serial number, model, etc.
		var informationService = new Service.AccessoryInformation();
	
		informationService
		.setCharacteristic(Characteristic.Manufacturer, "HTTP Manufacturer")
		.setCharacteristic(Characteristic.Model, "HTTP Model")
		.setCharacteristic(Characteristic.SerialNumber, "HTTP Serial Number");
	
		switch (this.service) {
		//%% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//%%   | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//%% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		// JavaHAP ACCESSORIES: %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		case "RabbitmqSwitch": 
			this.switchService = new Service.Switch(this.name);
			this.switchService
					.getCharacteristic(Characteristic.On)
					.on('get', this.getRabbitqPowerState.bind(this))
					.on('set', this.setRabitmqPowerState.bind(this));	
			that.getRabbitqPowerState(this.fakeFunction);
			return [informationService, this.switchService];
			break;

		case "RabbitmqLightbulb":	
			this.lightbulbService = new Service.Lightbulb(this.name);			
			this.lightbulbService
				.getCharacteristic(Characteristic.On)
				.on('get', this.getRabbitqPowerState.bind(this))
				.on('set', this.setRabitmqPowerState.bind(this));
			this.lightbulbService
				.addCharacteristic(new Characteristic.Brightness())
				.on('get', this.getRabbitqBrightness.bind(this))
				.on('set', this.setRabitmqBrightness.bind(this));		
			that.getRabbitqBrightness(this.fakeFunction);
			return [informationService, this.lightbulbService];
			break;

		case "RabbitmqThermostat":	
			this.thermostatService = new Service.Thermostat(this.name);			
			this.thermostatService
				.getCharacteristic(Characteristic.TargetHeatingCoolingState)
				.on('get', this.getRabbitqTargetHeatingCoolingState.bind(this))
				.on('set', this.setRabitmqTargetHeatingCoolingState.bind(this));
				this.thermostatService
				.getCharacteristic(Characteristic.CurrentTemperature)
				.on('get', this.getRabbitqCurrentTemperature.bind(this))
				.on('set', this.setRabitmqCurrentTemperature.bind(this));
				this.thermostatService
				.getCharacteristic(Characteristic.TargetTemperature)
				.on('get', this.getRabbitqTargetTemperature.bind(this))
				.on('set', this.setRabitmqTargetTemperature.bind(this));
				this.thermostatService
				.getCharacteristic(Characteristic.TemperatureDisplayUnits)
				.on('get', this.getRabbitqTemperatureDisplayUnits.bind(this))
				.on('set', this.setRabitmqTemperatureDisplayUnits.bind(this));
	
			that.getRabbitqTargetTemperature(this.fakeFunction);
			return [informationService, this.thermostatService];
			break;	
		// END JavaHAP ACCESSORIES %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//%% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//%% |   %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		//%% | %% | %% | %%  %% | %% | %% | %% | %% | %% | %% | %% | %% | %% | 
		case "Switch": 
			this.switchService = new Service.Switch(this.name);
			switch (this.switchHandling) {	
				//Power Polling			
				case "yes":					
					this.switchService
					.getCharacteristic(Characteristic.On)
					.on('get', this.getPowerState.bind(this))
					.on('set', this.setPowerState.bind(this));						
					break;
				case "realtime":				
					this.switchService
					.getCharacteristic(Characteristic.On)
					.on('get', function(callback) {callback(null, that.state)})
					.on('set', this.setPowerState.bind(this));
					break;
				default	:	
					this.switchService
					.getCharacteristic(Characteristic.On)	
					.on('set', this.setPowerState.bind(this));					
					break;}
					return [this.switchService];
		case "Light":	
			this.lightbulbService = new Service.Lightbulb(this.name);			
			switch (this.switchHandling) {
			//Power Polling
			case "yes" :
				this.lightbulbService
				.getCharacteristic(Characteristic.On)
				.on('get', this.getPowerState.bind(this))
				.on('set', this.setPowerState.bind(this));
				break;
			case "realtime":
				this.lightbulbService
				.getCharacteristic(Characteristic.On)
				.on('get', function(callback) {callback(null, that.state)})
				.on('set', this.setPowerState.bind(this));
				break;
			default:		
				this.lightbulbService
				.getCharacteristic(Characteristic.On)	
				.on('set', this.setPowerState.bind(this));
				break;
			}
			// Brightness Polling 
			if (this.brightnessHandling == "realtime") {
				this.lightbulbService 
				.addCharacteristic(new Characteristic.Brightness())
				.on('get', function(callback) {callback(null, that.currentlevel)})
				.on('set', this.setBrightness.bind(this));
			} else if (this.brightnessHandling == "yes") {
				this.lightbulbService
				.addCharacteristic(new Characteristic.Brightness())
				.on('get', this.getBrightness.bind(this))
				.on('set', this.setBrightness.bind(this));							
			}
	
			return [informationService, this.lightbulbService];
			break;		
		}
	}
};